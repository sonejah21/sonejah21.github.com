<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sonja Hall]]></title>
  <link href="http://sonejah21.github.io/atom.xml" rel="self"/>
  <link href="http://sonejah21.github.io/"/>
  <updated>2013-10-28T11:04:09-04:00</updated>
  <id>http://sonejah21.github.io/</id>
  <author>
    <name><![CDATA[Sonja Hall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tried and True Testing: The RSpec Way]]></title>
    <link href="http://sonejah21.github.io/blog/2013/10/25/tried-and-true-testing-the-rspec-way/"/>
    <updated>2013-10-25T00:00:00-04:00</updated>
    <id>http://sonejah21.github.io/blog/2013/10/25/tried-and-true-testing-the-rspec-way</id>
    <content type="html"><![CDATA[<p>This week we powered through week 5 at Flatiron. Once petrified by the typhoon of fresh terms, further abstracted concepts and a growing number of triple-letter acronyms being added to my vocabulary, I am now fully embracing all things Ruby, SQL, and Sinatra.</p>

<br>


<p style="text-align:center;"><img src="http://sonejah21.github.io/images/2013-10-25/rspec_blogpost_5.png" alt= "RSpec image" style="width: 400px;"/></p>

<!-- more -->


<p>Thinking I could forever hide from writing RSpec tests has been another story. In an effort to meet my nemesis head-on, I decided to dedicate this post to the RSpec testing conventions that have silently betrayed my native language (English) with its seemingly lenient codes that are easily digestible and therefore impossible to remember.</p>

<p>Sidenote: Check out Gregg Pollack&rsquo;s <a href="http://blog.envylabs.com/post/29015255528/we-aint-got-no-rspec">&ldquo;We Ain&rsquo;t Got No RSpec&rdquo; </a>blogpost from a couple years ago. It&rsquo;s a voicemail left on the Envy Labs voicemail that they remixed, and it will definitely get you in the mood to write some RSpec.</p>

<p style="text-align:center;"><a href="http://blog.envylabs.com/post/29015255528/we-aint-got-no-rspec"><img src="http://sonejah21.github.io/images/2013-10-25/rspec_blogpost_6.jpg" alt="We Ain't Got No RSpec - Envy Labs." style="width: 400px;"/></a></p>

<p>My first homework assignment that dealt with RSpec was among the most frustrating because I had no idea I could look at the test results. Needless to say, I spent hours not passing any at all. If I recall correctly, I asked Avi for help the next day and mid-way through the exercise, we had this first conversation:</p>

<br>


<p style="text-align:center;"><img src="http://sonejah21.github.io/images/2013-10-25/rspec_blogpost_1.jpg" alt="Initial RSpec conversation." /></p>

<p>In the same way that I wrote about fanatically mimicking smart programmers like Sandi Metz (in my recent<a href="http://sonejah21.github.io/2013-10-11-mimic-metz-speak-matz">post</a>) one must mimic the pros of RSpec. The best way to start learning about RSpec testing is simply by copying and pasting a fool-proof test and changing out the values. Or as Avi recommended the first time we discussed RSpec&hellip;</p>

<br>


<p>Backing up for a moment, let&rsquo;s make sure we understand that RSpec is a Domain Specific Language (or DSL) used to describe the expected behavior of a system with executable examples. Just like in the English language, we use terms like &ldquo;should&rdquo; and &ldquo;do&rdquo; to make sure our tests are intuitive to the program itself.</p>

<p>That said, here are a couple of the basic patterns to get used to seeing and understanding in RSpec:</p>

<pre><code>describe 'A Computer' do 
end
</code></pre>

<p>=>  A Computer</p>

<pre><code>describe Computer do
end
</code></pre>

<p>=>  Computer</p>

<pre><code>describe Computer, 'with new software' do
end
</code></pre>

<p>=>  Computer with new software</p>

<ul>
<li>Here, the <code>describe Array do</code> block in RSpec refers to the behavior of a Ruby class, this would be a <code>class Array</code>. You can tell because the word &ldquo;Array&rdquo; it is capitalized, and thus, RSpec is hinting to the programmer what it is looking for.</li>
</ul>


<hr />

<pre><code>describe Array do
  it "should return a blank instance" do
    Array.new.should == []
  end
end
</code></pre>

<ul>
<li>The <code>it</code> block + <code>string</code> as first argument gives you the opportunity to write a detailed, specific expectation of the behavior using <code>"should"</code> and <code>do</code>.</li>
</ul>


<hr />

<ul>
<li><code>assert_xxx</code>in Ruby == <code>object.should_be xxx</code> in RSpec.</li>
</ul>


<hr />

<ul>
<li><code>def test_shout</code> in Ruby == <code>It 'should shout'</code> in RSpec.</li>
</ul>


<hr />

<ul>
<li><code>def setup</code> in Ruby == <code>before(:each) {}</code> in RSpec.</li>
</ul>


<hr />

<p>Instead of heading deeper into the syntax of RSpec &ndash; since you can always just copy and paste the syntax if you understand how it works &ndash; check out my new favorite cheat sheet <a href="http://www.anchor.com.au/wp-content/uploads/rspec_cheatsheet_attributed.pdf">here</a> (and below) in a blogpost by Barney Desmond of Anchor Managed Hosting. There are actually two sides to it (but only one is shown). They recommend printing it out as a reference guide to RSpec if you&rsquo;re just starting to run test suites.</p>

<br>


<p style="text-align:center;"><img src="http://sonejah21.github.io/images/2013-10-25/rspec_blogpost_4.jpg" alt= "RSpec cheat sheet by Anchor" style="width: 600px;"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Winning Arguments.]]></title>
    <link href="http://sonejah21.github.io/blog/2013/10/11/winning-arguments/"/>
    <updated>2013-10-11T00:00:00-04:00</updated>
    <id>http://sonejah21.github.io/blog/2013/10/11/winning-arguments</id>
    <content type="html"><![CDATA[<p>Parentheses are a subtle to include information in literature. They group numbers together in math equations, trail behind long organization titles in news reports, and even distinguish between an area code and a person&rsquo;s unique telephone number.</p>

<p>When we switch gears into Ruby, parentheses are no longer representative of a polite nudge like they once were to us. Sitting alongside a method, they&rsquo;re now considered powerful argumentation.</p>

<!-- more -->


<p>In a blogpost written by a <a href="http://www.skorks.com/2009/08/method-arguments-in-ruby/">Alan Skorkin</a>, he says that contrary to popular belief, a method argument should be broken up into three separate, and easily digestible categories: required arguments, arguments with default values, and optional arguments.</p>

<p><img src="http://sonejah21.github.io/images/2013-10-11/image-1.jpg" alt="Required arguments." /></p>

<h3>Required arguments (aka: &ldquo;Ordinal Params&rdquo;)</h3>

<p>Required arguments are your run-of-the-mill arguments. Nothing left to the imagination, require arguments are straightforward in their approach to gathering information from other sources.</p>

<pre><code>def method_example( x, y )
end 
</code></pre>

<p>Once you have defined your method, you will always need to provide the same number of arguments when calling the method.</p>

<pre><code>method_example( 2013, "Flatiron School" )
</code></pre>

<p><img src="http://sonejah21.github.io/images/2013-10-11/image-4.jpg" alt="Arguments with Default Values." /></p>

<h3>Arguments with Default Values (aka: &ldquo;Params with Default Values&rdquo;)</h3>

<p>Instead of assigning a specific number of arguments, you may also assign assigning a default value to an argument.</p>

<pre><code>def horse_method( x, y, z = "appaloosa" )
end
</code></pre>

<p>You can then call this method in one of two ways:</p>

<pre><code>horse_method( 2, "shire" )
#=&gt; horse_method( 2, "shire", "appaloosa")
</code></pre>

<p> <em>&ndash; OR &ndash;</em></p>

<pre><code>horse_method( 2,  "shire",  "thoroughbred" )
</code></pre>

<p>The first example (above) calls the method without placing a value as its third parameter, resulting in the default value filled in as its third parameter. The second example has three parameters set and does not need to use the default value.</p>

<p><img src="http://sonejah21.github.io/images/2013-10-11/image-2.jpg" alt="Optional Arguments." /></p>

<h3>Optional arguments (aka: &ldquo;Arguments as an Array&rdquo;)</h3>

<p>This is a special method argument that Ruby allows you to use that many refer to as &ldquo;splat&rdquo;.</p>

<p>To see an excellent blogpost describing splat&rsquo;s usage in more depth, check out <a href="http://manu3569.github.io/blog/2013/10/08/what-the-splat/">Manuel Neuhauser</a>&rsquo;s blog on the topic.</p>

<p>At a basic level, the optional argument allows you to decide at runtime how many arguments you&rsquo;ll supply to a method:</p>

<pre><code>def caffe_method( *italian_favorites )
end
</code></pre>

<p>Which could be called with:</p>

<pre><code>caffe_method( "cappuccino", "espresso", "macchiato" )
#=&gt; [ "cappuccino", "espresso", "macchiato" ] 
</code></pre>

<p>You can then call it with any number of arguments, or no methods at all, resulting in an array with the exact number of arguments specified (or none at all if no arguments were defined).</p>

<p><img src="http://sonejah21.github.io/images/2013-10-11/image-3.jpg" alt="Arguments that combine a bit of everything." /></p>

<h3>Combinations</h3>

<p>In addition to the three general uses of method arguments in Ruby, all of them can be mixed and matched together, creating a unique assortment of required, default values, and optional arguments.</p>

<p>For example:</p>

<pre><code>def combination_method( a,  b,  c = 5, *d , e)
end
</code></pre>

<p>If called with:</p>

<pre><code>combination_method( 21, 31, 11 )

#=&gt; a = 21, b = 31, c = 5, d=[], e = 11
</code></pre>

<p>Since each required value gets an assigned value, the default value kicks in with its default, and the optional, or splat(*) argument would return an empty array.</p>

<p>While method arguments are seemingly basic at first glance, understanding the way they work by themselves, with default values and optional parameters, as well in unison while all hanging out in the same set of parentheses is an integral stepping stone to making your beginner Ruby methods function properly.</p>

<p>Happy arguing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mimic Metz. Speak Matz.]]></title>
    <link href="http://sonejah21.github.io/blog/2013/10/07/mimic-metz-speak-matz/"/>
    <updated>2013-10-07T21:54:00-04:00</updated>
    <id>http://sonejah21.github.io/blog/2013/10/07/mimic-metz-speak-matz</id>
    <content type="html"><![CDATA[<p>While many of us hate to admit it as adults, learning brand new skills requires a healthy dose of duplication to get past the beginner hurdles. If we think back to elementary school when we noticed a classmate copying our finger painting stroke-by-stroke or repeating what we say word-for-word, it was obnoxious and downright confusing.</p>

<!-- more -->


<p>Just two weeks into the Flatiron School&rsquo;s Ruby on Rails course and I finally understand what those copycat kids were up to.</p>

<p>I am officially in awe of the fluid, concise Ruby brain matter that spills out of our instructors. In fact, the only thing I want to surround myself with is the symphony of high class, exceptional Ruby classes, methods and hashes. I want to listen to it, watch it get sharpened, and hopefully etch each of their gorgeous melodies into memory for future use.</p>

<p>While the latter has not happened quite yet, the promising conclusion I&rsquo;ve come to is that by surrounding myself with the best practices of Ruby &ndash; especially the most structured approach to looking at each problem &ndash; the flow of coding is an inevitable result with such fantastic mentors.</p>

<p><img src="http://sonejah21.github.io/images/slide4.png" alt="Go Ahead, Make a Mess" /></p>

<p>Speaking of which, Sandi Metz and her presentation &ldquo;Go Ahead, Make a Mess&rdquo; (found on Speaker Deck) propelled me to write this blogpost to encourage other beginners to seek out teachers who can dive right into the necessary &ldquo;programmer&rsquo;s mindset&rdquo;. After a spin through her 266 slides on the matter of object-oriented, human intuition-driven design, I classify myself as another hardcore Metz follower of the Matz language.</p>

<p>Two of my favorite ideas that she presented were the following:</p>

<ol>
<li>Like a 4-step rehab for the anxiety-prone noobs, she encourages the mess and shows her problem-solving approach to coding (along with several clairvoyant examples).</li>
</ol>


<p><img src="http://sonejah21.github.io/images/slide1.png" alt="Go Ahead, Make a Mess" /></p>

<ol>
<li>Metz explains her reasoning through a colorful infographic that separates one&rsquo;s &ldquo;Knowledge Plot&rdquo; into four sections.</li>
</ol>


<p><img src="http://sonejah21.github.io/images/slide2.png" alt="Go Ahead, Make a Mess" /></p>

<p>The graphic interacts with each step of her code, warning her to &ldquo;move&rdquo; or &ldquo;minimize&rdquo; each piece of code she is considering if it enters the red or orange zones of &ldquo;Unstable&rdquo; or &ldquo;Outside of My Purpose, while allowing it to remain in the top green section that is considered &#8220;Stable&rdquo; and &ldquo;Within My Purpose&rdquo;.</p>

<p><img src="http://sonejah21.github.io/images/slide3.png" alt="Go Ahead, Make a Mess" /></p>

<p>Thank you, Sandi Metz, for putting your lessons out there for us noobs to reflect upon and etch into our Ruby mindsets! Your poise, articulation of ideas and steadfast approach to writing code is an inspiration to us all.</p>
]]></content>
  </entry>
  
</feed>
